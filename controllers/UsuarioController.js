const UsuarioModel = require('../models/UsuarioModel');

exports.listarUsuarios = async (req, res) => {
  try {
    const usuarios = await UsuarioModel.listar();
    res.json(usuarios);
  } catch (err) {
    console.error('Erro ao listar usu√°rios:', err);
    res.status(500).json({ error: err.message });
  }
};

exports.obterUsuarioPorId = async (req, res) => {
  try {
    const usuario = await UsuarioModel.obterPorId(req.params.id);
    if (!usuario) return res.status(404).json({ message: 'Usu√°rio n√£o encontrado' });
    res.json(usuario);
  } catch (err) {
    console.error('Erro ao obter usu√°rio:', err);
    res.status(500).json({ error: err.message });
  }
};

exports.criarUsuario = async (req, res) => {
  try {
    const { nome, email } = req.body;
    
    // Valida√ß√£o b√°sica
    if (!nome || !email) {
      return res.status(400).json({ error: 'Nome e email s√£o obrigat√≥rios' });
    }
    
    // Valida√ß√£o de email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ error: 'Email inv√°lido' });
    }
    
    const dadosUsuario = {
      nome: nome.trim(),
      email: email.trim().toLowerCase(),
      senha_hash: 'hash_placeholder' // Por enquanto um placeholder
    };
    
    console.log('üìù Tentando criar usu√°rio:', { nome: dadosUsuario.nome, email: dadosUsuario.email });
    
    const usuario = await UsuarioModel.criar(dadosUsuario);
    
    console.log('‚úÖ Usu√°rio criado com sucesso:', usuario.id);
    res.status(201).json(usuario);
  } catch (err) {
    console.error('‚ùå Erro ao criar usu√°rio:', err);
    
    // Tratamento espec√≠fico para diferentes tipos de erro
    if (err.code === '23505') { // Viola√ß√£o de constraint UNIQUE
      res.status(400).json({ error: 'Este email j√° est√° cadastrado no sistema' });
    } else if (err.code === '23502') { // Viola√ß√£o de NOT NULL
      res.status(400).json({ error: 'Todos os campos obrigat√≥rios devem ser preenchidos' });
    } else if (err.message.includes('connection')) {
      res.status(503).json({ error: 'Problema de conex√£o com o banco de dados. Tente novamente.' });
    } else {
      res.status(500).json({ error: 'Erro interno do servidor: ' + err.message });
    }
  }
};

exports.editarUsuario = async (req, res) => {
  try {
    const { nome, email } = req.body;
    
    // Valida√ß√£o b√°sica
    if (!nome || !email) {
      return res.status(400).json({ error: 'Nome e email s√£o obrigat√≥rios' });
    }
    
    // Mantendo o placeholder da senha_hash para atualiza√ß√£o
    const dadosUsuario = {
      nome,
      email,
      senha_hash: 'hash_placeholder' // Idealmente, isso n√£o deveria ser atualizado sem valida√ß√£o
    };
    
    const usuario = await UsuarioModel.atualizar(req.params.id, dadosUsuario);
    if (!usuario) return res.status(404).json({ message: 'Usu√°rio n√£o encontrado' });
    res.json(usuario);
  } catch (err) {
    console.error('Erro ao editar usu√°rio:', err);
    if (err.message.includes('duplicate') || err.message.includes('unique')) {
      res.status(400).json({ error: 'Email j√° est√° em uso' });
    } else {
      res.status(500).json({ error: err.message });
    }
  }
};

exports.excluirUsuario = async (req, res) => {
  try {
    const resultado = await UsuarioModel.excluir(req.params.id);
    if (!resultado) return res.status(404).json({ message: 'Usu√°rio n√£o encontrado' });
    res.status(200).json({ message: 'Usu√°rio exclu√≠do com sucesso' });
  } catch (err) {
    console.error('Erro ao excluir usu√°rio:', err);
    res.status(500).json({ error: err.message });
  }
};